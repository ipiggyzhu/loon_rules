# .github/workflows/convert.yml
name: 1. Convert Upstream Rules

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    # 每天 UTC 23:30 运行 (北京时间 7:30)
    - cron: "30 23 * * *"

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要写入权限来推送更改
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests

      - name: Run converter script
        run: |
          # 我们直接把 Python 脚本逻辑放在这里
          cat << 'EOF' > converter.py
          import requests
          import os

          SOURCES_TO_CONVERT = [
              "https://raw.githubusercontent.com/AdguardTeam/AdguardFilters/master/SpywareFilter/sections/tracking_servers.txt",
              "https://raw.githubusercontent.com/privacy-protection-tools/anti-ad/master/anti-ad-adguard.txt",
              "https://raw.githubusercontent.com/damengzhu/banad/main/jiekouAD.txt"
          ]
          OUTPUT_FILE = "generated/converted-ad-rules.list"

          def fetch_source(url):
              try:
                  response = requests.get(url, timeout=60)
                  response.raise_for_status()
                  print(f"✅ Fetched {url}")
                  return response.text.split('\n')
              except requests.RequestException as e:
                  print(f"❌ Error fetching {url}: {e}")
                  return []

          def parse_to_domain_set(lines):
              domains = set()
              for line in lines:
                  line = line.split('#')[0].strip()
                  if not line or line.startswith(('!', '[', '/')): continue
                  if line.startswith('||') and line.endswith('^'): domain = line[2:-1]
                  elif ' ' in line and not line.startswith('DOMAIN-'): domain = line.split()[1]
                  else: domain = line
                  domain = domain.strip().lower()
                  if domain: domains.add(domain)
              return domains

          def main():
              print("--- Starting Conversion Process ---")
              all_domains = set()
              for url in SOURCES_TO_CONVERT:
                  lines = fetch_source(url)
                  domains = parse_to_domain_set(lines)
                  all_domains.update(domains)
              os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)
              with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                  f.write(f"# Auto-generated by GitHub Action\n")
                  f.write(f"# Total unique domains: {len(all_domains)}\n\n")
                  for domain in sorted(list(all_domains)):
                      f.write(f"DOMAIN-SUFFIX,{domain},REJECT\n")
              print(f"🎉 Generated {OUTPUT_FILE} with {len(all_domains)} rules.")

          if __name__ == "__main__":
              main()
          EOF
          python converter.py

      - name: Commit and Push converted list
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # 只添加 generated 目录下的文件
          git add generated/
          if ! git diff --staged --quiet; then
            git commit -m "build(auto): 更新转换后的规则列表"
            git push
          else
            echo "No changes in converted rules. Nothing to push."
          fi
